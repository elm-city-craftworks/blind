#!/usr/bin/env ruby

require 'ray'
require 'optparse'

require_relative "../lib/blind"
require_relative "../config/games"

# Optionally set the number of mines in the game.
# If an argument is not provided, the game will create 30 mines by default

options = { :num_mines => 30,
            :map        => "original" }

option_parser = OptionParser.new do |opts|

  opts.on("-n MINES",
          ('1'..'60').to_a,
          Integer,
          "Number of mines, between 1 and 60. Default: #{options[:num_mines]}") do |num_mines|

    # NOTE: This is a workaround for problem I spotted with having more
    # than 64 sounds in the game playing simultaneously!
    options[:num_mines] = num_mines
  end

  opts.on("-m MAP",
          String,
          "Map name, Default: #{options[:map]}" ) do |map_name|
    options[:map] = map_name
  end

  opts.on("-d", "--debug",
         "Enable debug output") do
    $DEBUG = true
  end

end

# Handle invalid arguments gracefully
begin
  option_parser.parse!
rescue OptionParser::InvalidOption,
       OptionParser::InvalidArgument => e
  puts e
  puts option_parser
  exit 1
end
num_mines = options[:num_mines]

# Take care of some initial boilerplate for the game

game = Blind::UI::GamePresenter.new(Blind::Games.cramped)

Ray::Audio.pos = [0,0,0]

game_runner = Blind::UI::GameRunner.new

scene         = game_runner.registered_scene(:main)
scene.game    = game

game_runner.run
